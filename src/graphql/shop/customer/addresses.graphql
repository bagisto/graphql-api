#Shop\Customer\Address Related APIs
extend type Query @guard(with: ["api"]){
    addresses(
        input: FilterCustomerAddressInput
        @builder(method: "Webkul\\GraphQLAPI\\Queries\\Admin\\Customer\\FilterCustomerAddress")
    ): [Address] @paginate(type: "PAGINATOR" defaultCount: 10 model: "Webkul\\Customer\\Models\\CustomerAddress")

    address(
        id: ID @eq
    ): Address @find(model: "Webkul\\Customer\\Models\\CustomerAddress")
}

extend type Mutation @guard(with: ["api"]) {
    createAddress(
        input: AddressInput!
    ): AddressListResult @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\AddressesMutation@store")

    updateAddress(
        id: ID!,
        input: AddressInput!
    ): AddressListResult @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\AddressesMutation@update")

    setDefaultAddress(
        id: ID!
    ): Address  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\AddressesMutation@setDefaultAddress")

    deleteAddress(
        id: ID!
    ): StatusResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\AddressesMutation@delete")
}

input AddressInput {
    companyName: String @rename(attribute: "company_name")
    firstName: String! @rename(attribute: "first_name") @rules(apply: ["required"])
    lastName: String! @rename(attribute: "last_name") @rules(apply: ["required"])
    email: String! @rules(apply: ["email"])
    vatId: String @rename(attribute: "vat_id")
    address: [String]! @rules(apply: ["required"])
    country: String! @rules(apply: ["required"])
    state: String! @rules(apply: ["required"])
    city: String! @rules(apply: ["required"])
    postcode: String! @rules(apply: ["required"])
    phone: String! @rules(apply: ["required"])
    defaultAddress: Boolean @rename(attribute: "default_address")
}

type AddressListResult {
    status: Boolean
    message: String
    addresses: Address
}
