# Setting\User Related APIs
extend type Query @guard(with: ["admin-api"]){
    users(
        input: FilterUserInput
        @builder(method: "Webkul\\GraphQLAPI\\Queries\\Admin\\Setting\\FilterUser")
    ): [User!] @paginate(type: "PAGINATOR" defaultCount:10 model: "Webkul\\User\\Models\\Admin")

    user(
        id: ID @eq
    ): User @find(model: "Webkul\\User\\Models\\Admin")
}

extend type Mutation {
    userLogin(
        input: CreateUserLoginInput!
    ): LoginResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Setting\\UserMutation@login")

    userLogout: LogoutResponse @guard(with: ["admin-api"]) @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Setting\\UserMutation@logout")

    createUser(
        input: CreateUserInput!
    ): User @guard(with: ["admin-api"]) @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Setting\\UserMutation@store")

    updateUser(
        id: ID!,
        input: CreateUserInput!
    ): User @guard(with: ["admin-api"]) @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Setting\\UserMutation@update")

    deleteUser(
        id: ID!
    ): User @guard(with: ["admin-api"]) @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Setting\\UserMutation@delete")
}

input FilterUserInput {
    id: Int
    name: String
    email: String @rules(apply: ["email"])
    roleId: Int @rename(attribute: "role_id")
    role: String
    status: Boolean
}

input CreateUserLoginInput {
    email: String! @rules(apply: ["email","required"])
    password: String! @rules(apply: ["min:6","required"])
    remember: Boolean
}

input CreateUserInput {
    name: String! @rules(apply: ["required"])
    email: String! @rules(apply: ["email","required"])
    password: String @rules(apply: ["min:6"])
    passwordConfirmation: String @rename(attribute: "password_confirmation")
    roleId: Int! @rename(attribute: "role_id") @rules(apply: ["required"])
    status: Boolean
    image: String
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String
    apiToken: String @rename(attribute: "api_token")
    status: Boolean
    roleId: Int! @rename(attribute: "role_id")
    image: String @rename(attribute: "image_url")
    rememberToken: String @rename(attribute: "remember_token")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    role: Role! @belongsTo(relation: "role")
    success: String
}

type LoginResponse {
    status: Boolean
    success: String
    accessToken: String @rename(attribute: "access_token")
    tokenType: String @rename(attribute: "token_type")
    expiresIn: Int @rename(attribute: "expires_in")
    user: User
}

type LogoutResponse {
    status: Boolean
    success: String
}
