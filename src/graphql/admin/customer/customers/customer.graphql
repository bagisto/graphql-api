# Customer\Customer Related APIs
extend type Query @guard(with: ["admin-api"]) {
    customers(
        input: FilterCustomerInput
        @builder(method: "Webkul\\GraphQLAPI\\Queries\\Admin\\Customer\\FilterCustomer")
    ): [Customer!] @paginate(type: "PAGINATOR" defaultCount:10 model: "Webkul\\Customer\\Models\\Customer")

    customer(
        id: ID @eq
    ): Customer @find(model: "Webkul\\Customer\\Models\\Customer")
}

extend type Mutation @guard(with: ["admin-api"]) {
    createCustomer(
        input: CreateCustomerInput!
    ): Customer @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Customer\\CustomerMutation@store")

    updateCustomer(
        id: ID!,
        input: CreateCustomerInput!
    ): Customer @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Customer\\CustomerMutation@update")

    storeNotes(
        id: ID!,
        input: CreateCustomerNoteInput!
    ): Note @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Customer\\CustomerMutation@storeNotes")

    deleteCustomer(id: ID!): Customer @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Admin\\Customer\\CustomerMutation@delete")
}

input FilterCustomerInput {
    id: Int
    name: String
    gender: Gender
    email: String
    dateOfBirth: String @rename(attribute: "date_of_birth")
    groupName: String @rename(attribute: "group_name")
    phone: String
    status: Boolean
}

input CreateCustomerInput {
    firstName: String! @rename(attribute: "first_name") @rules(apply: ["required"])
    lastName: String! @rename(attribute: "last_name") @rules(apply: ["required"])
    gender: Gender! @rules(apply: ["required"])
    email: String! @rules(apply: ["required","email"])
    dateOfBirth: String @rename(attribute: "date_of_birth")
    customerGroupId: Int! @rename(attribute: "customer_group_id")
    phone: String
    status: Boolean
    isSuspended: Boolean @rename(attribute: "is_suspended")
}

input CreateCustomerNoteInput {
    note: String! @rules(apply: ["required"])
    customerNotified: Boolean @rename(attribute: "customer_notified")
}

type Customer {
    id: ID!
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    name: String
    gender: String
    dateOfBirth: String @rename(attribute: "date_of_birth")
    email: String!
    phone: String
    image: String
    imageUrl: String @rename(attribute: "image_url")
    status: Boolean
    password: String!
    apiToken: String @rename(attribute: "api_token")
    customerGroupId: Int @rename(attribute: "customer_group_id")
    subscribedToNewsLetter: Boolean @rename(attribute: "subscribed_to_news_letter")
    isVerified: Boolean @rename(attribute: "is_verified")
    isSuspended: Boolean @rename(attribute: "is_suspended")
    token: String
    rememberToken: String @rename(attribute: "remember_token")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    customerGroup: CustomerGroup @belongsTo(relation: "group")
    addresses: [Address] @hasMany
    defaultAddress: Address @hasOne(relation: "default_address")
    invoices: [Invoice] @hasMany
    wishlist: [Wishlist] @hasMany(relation: "wishlist_items")
    isWishlistShared: Boolean @rename(attribute: "is_wishlist_shared")
    getWishlistSharedLink: String @rename(attribute: "get_wishlist_shared_link")
    allCarts: [Cart] @hasMany(relation: "all_carts")
    inactiveCarts: [Cart] @hasMany(relation: "inactive_carts")
    activeCarts: [Cart] @hasMany(relation: "active_carts")
    orders: [Order] @hasMany
    reviews: [Review] @hasMany
    notes: [Note] @hasMany
    subscription: Subscriber @hasOne
    success: String
}

type Note {
    id: ID
    customerId: ID @rename(attribute: "customer_id")
    note: String
    customerNotified: Boolean @rename(attribute: "customer_notified")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    customer: Customer
    success: String
}
